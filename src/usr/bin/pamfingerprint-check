#!/usr/bin/env python

"""
"" pamfingerprint
"" Configuration check program.
""
"" Copyright 2014 Philipp Meisberger, Bastian Raschke.
"" All rights reserved.
"""

import sys 
sys.path.append('/usr/lib')

from pamfingerprint.version import VERSION
from pamfingerprint.Config import *

## TODO: Change PyFingerprintConnection to PyFingerprint
from PyFingerprint.PyFingerprintConnection import *

import argparse
import hashlib


class PamFingerprintCheck(object):
    
    """
    "" The PyFingerprint instance
    "" @var PyFingerprint __fingerprint
    """
    __fingerprint = None

    """
    "" Constructor
    ""
    "" @return void
    """
    def __init__(self):

        ## Tries to init config instance
        try:
            self.__config = Config('/etc/pamfingerprint.conf')

        except Exception as e:
            print '[Exception] ' + e.message
            exit(1)

        ## Gets connection values
        port = self.__config.readString('PyFingerprint', 'port')
        baudRate = self.__config.readInteger('PyFingerprint', 'baudRate')
        address = self.__config.readHex('PyFingerprint', 'address')
        password = self.__config.readHex('PyFingerprint', 'password')

        ## Tries to establish connection
        try:
            ## TODO: Change PyFingerprintConnection to PyFingerprint
            self.__fingerprint = PyFingerprintConnection(port, baudRate, address, password)

            if ( self.__fingerprint.verifyPassword() == False ):
                raise ValueError('The given fingerprint sensor password is wrong!')

        except (Exception, ValueError) as e:
            print '[Error] The fingerprint sensor could not be initialized!'
            print '[Exception] ' + e.message
            exit(1)

    """
    "" Do a fingerprint check for a given user.
    ""
    "" @param string userName
    "" @return boolean
    """
    def checkUser(self, userName):

        ## Tries to get fingerprint hash of user
        try:
            expectedFingerprintHash = self.__config.readString('Users', userName)

        except ConfigParser.NoOptionError:
            print '[Error] The user "'+ userName +'" does not exist!'
            return False
        
        ## Tries to check fingerprint
        try:
            logger.info('Waiting for finger...')

            while ( self.__fingerprint.readImage() == False ):
                pass
    
            self.__fingerprint.convertImage(0x01)

            ## Gets position of template
            result = self.__fingerprint.searchTemplate()
            positionNumber = result[0]

            ## Invalid position
            if ( positionNumber == -1 ):
                logger.error('Check for user "'+ userName +'" failed: No match found!')
                return False

            self.__fingerprint.loadTemplate(positionNumber, 0x01)
            characterics = self.__fingerprint.downloadCharacteristics(0x01)

            ## Calculates hash of template
            fingerprintHash = hashlib.sha256(str(characterics)).hexdigest()
        
            ## Checks if read hash matches stored hash
            if ( fingerprintHash == expectedFingerprintHash ):
                logger.info('Check for user "'+ userName +'" was successful!')
                return True
            else:
                logger.error('Check for user "'+ userName +'" failed: The found match is not assigned to user!')
                return False
            
        except Exception as e:
            logger.error(e.message, exc_info=True)
            return False

        return False


if ( __name__ == '__main__' ):

    parser = argparse.ArgumentParser(description = 'pamfingerprint configuration check:')

    parser.add_argument('--check-user', metavar='NAME', help='Checks fingerprint for an existing user.')
    parser.add_argument('--version', '-v', action='version', version='pamfingerprint '+ VERSION, help='Print version and exit.')

    args = vars(parser.parse_args())
        
    if ( args['check_user'] ):
        PamFingerprintCheck().checkUser(args['check_user'])
    else:
        parser.print_help()
