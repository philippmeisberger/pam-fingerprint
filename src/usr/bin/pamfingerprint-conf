#!/usr/bin/env python

"""
"" PAM Fingerprint
"" Main program
""
"" @author Philipp Meisberger
""
"" Copyright 2014 Bastian Raschke, Philipp Meisberger.
"" All rights reserved.
"""

from pamfingerprint.classes.Logger import *
from pamfingerprint.classes.Config import *
from PyFingerprint.PyFingerprint import *

import argparse


class PamFingerprint(object):

    """
    "" The fingerprint library object
    "" @var PyFingerprint __fingerprint
    """
    __fingerprint = None
    
    """
    "" Argument parser instance
    "" @var argparse __parser
    """
    __parser = None

    """
    "" Logger instance
    "" @var Logger __logger
    """
    __logger = None

    """
    "" Config instance
    "" @var Config __config
    """
    __config = None
    
    """
    "" Constructor
    ""
    "" @return void
    """
    def __init__(self):

        ## Tries to init config instance
        try:
            self.__config = Config('/etc/pamfingerprint.conf')

        except Exception:
            print 'TODO: Config Exception message'
            exit(1)

        ## Tries to init logger instance
        try:
            self.__logger = Logger('/var/log/pamfingerprint.log')

        except Exception as e:
            print e
            exit(1)

        ## Gets connection values
        port = self.__config.readString('PyFingerprint', 'port')
        baudRate = self.__config.readInteger('PyFingerprint', 'baudRate')
        address = self.__config.readHex('PyFingerprint', 'address')
        password = self.__config.readHex('PyFingerprint', 'password')

        ## Tries to establish connection
        try:
            self.__fingerprint = PyFingerprint(port, baudRate, address, password)

        except Exception as e:
            print e
            exit(1)
            
        self.__parser = argparse.ArgumentParser(description='pamfingerprint configuration program.')
        self.__parser.add_argument('--add-user', metavar='name', help='Adds a new user and enrolls new fingerprint image.')
        self.__parser.add_argument('--remove-user', metavar='name', help='Removes an user from the fingerprint database.')
        self.__parser.add_argument('--update', metavar='name', help='Enrolls new fingerprint image for an existing user.')
        self.__parser.add_argument('--check', metavar='', help='Enrolls fingerprint and checks if user was found.')

        args = vars(self.__parser.parse_args())

        if ( args['add_user'] ):
            self.addUser(args['add_user'])
        elif ( args['remove_user'] ):
            self.removeUser(args['remove_user'])
        elif ( args['update'] ):
            self.update(args['update'])
        elif ( args['check'] ):
            self.check()
        else:
            self.__parser.print_help()

    """
    "" Returns ID of user for a given name.
    ""
    "" @param string userName
    "" @return integer
    """
    def __getIdForName(self, userName):

        ## Gets all tuples <userName> = <template ID> from config
        users = self.__config.getItems('Users')
        
        for user in users:
            if ( user[0] == userName ):
                return self.__config.readInteger('Users', userName)

        return -1
        
    """
    "" Adds new user and enrolls new fingerprint image.
    ""
    "" @param string name
    "" @return boolean
    """
    def addUser(self, userName):

        ## Tries to create new template for user
        try:
            result = self.__fingerprint.createTemplate()

        except Exception as e:
            print e 
            return False

        positionNumber = result[1]
        
        ## Store tuple <userName> = <template ID> to config
        if ( ( result[0] == True ) and ( positionNumber > 0 ) ):
            self.__config.writeString('Users', userName, positionNumber)
            self.__logger.log(Logger.NOTICE, 'User '+ userName +' added successfully!')
            return True
        else:
            self.__logger.log(Logger.ERROR, 'Error while adding user '+ userName +'!')
            return False 
        
    """
    "" Removes an user from the fingerprint database.
    ""
    "" @param string name
    "" @return boolean
    """
    def removeUser(self, userName):

        ## Gets user ID
        userId = self.__getIdForName(userName)
        
        if ( userId < 0 ):
            self.__logger.log(Logger.ERROR, 'User \"'+ userName +'\" not found!')
            return False

        ## Confirmation dialog 
        answer = raw_input('Remove user ' + userName + '? (Y/n)')

        if ( answer in ['n', 'N'] ):
            print 'Abort!'
            return False
            
        ## Tries to delete template
        try:
            result = self.__fingerprint.deleteTemplate(userId)

        except Exception as e:
            print e
            return False

        ## Removes user from config
        if ( ( result == True ) and ( self.__config.remove('Users', userName) == True ) ):
            self.__logger.log(Logger.NOTICE, 'User '+ userName +' removed successfully!')
            return True
        else:
            self.__logger.log(Logger.ERROR, 'Error while removing user '+ userName +'!')
            return False        

    """
    "" Enrolls new fingerprint for existing user.
    ""
    "" @param string userName
    "" @return boolean
    """
    def update(self, userName):
        
        pass
        
    """
    "" Enrolls fingerprint and checks if user was found.
    ""
    "" @return boolean
    """
    def check(self):

        ## Tries to check fingerprint
        try:
            result = self.__fingerprint.searchTemplate()

        except Exception as e:
            print e
            return False

        if ( result[0] == False ):
            print 'No match found!'
            return False
        
        positionNumber = result[1]
        
        ## Gets all tuples <userName> = <template ID> from config
        users = self.__config.getItems('Users')

        ## Checks in config if <userName> matches <template ID>
        for user in users:
            if ( self.__config.readInteger('Users', user[0]) == positionNumber ):
                self.__logger.log(Logger.NOTICE, 'Check for user '+ user[0] +' was successful!')
                return True

        self.__logger.log(Logger.ERROR, 'Error while checking user '+ user[0] +'!')
        return False


PamFingerprint()
