#!/usr/bin/env python

"""
"" pamfingerprint
"" Configuration program.
""
"" Copyright 2014 Philipp Meisberger, Bastian Raschke.
"" All rights reserved.
"""

import sys 
sys.path.append('/usr/lib')

from pamfingerprint.version import VERSION
from pamfingerprint.Config import *

## TODO: Change PyFingerprintConnection to PyFingerprint
from PyFingerprint.PyFingerprintConnection import *

import hashlib
import argparse
import os

import logging

## Configures logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

## Creates and adds an output handler to logger
strmHandler = logging.StreamHandler()
strmHandler.setLevel(logging.DEBUG)
strmHandler.setFormatter(logging.Formatter('[%(levelname)s] %(message)s'))
logger.addHandler(strmHandler)


class PamFingerprint(object):

    """
    "" The PyFingerprint instance
    "" @var PyFingerprint __fingerprint
    """
    __fingerprint = None

    """
    "" Config instance
    "" @var Config __config
    """
    __config = None
    
    """
    "" Constructor
    ""
    "" @return void
    """
    def __init__(self):

        ## Tries to init config instance
        try:
            self.__config = Config('/etc/pamfingerprint.conf')

        except Exception, e:
            logger.error(e.message, exc_info=True)
            exit(1)

        ## Gets connection values
        port = self.__config.readString('PyFingerprint', 'port')
        baudRate = self.__config.readInteger('PyFingerprint', 'baudRate')
        address = self.__config.readHex('PyFingerprint', 'address')
        password = self.__config.readHex('PyFingerprint', 'password')

        ## Tries to establish connection
        try:
            ## TODO: Change PyFingerprintConnection to PyFingerprint
            self.__fingerprint = PyFingerprintConnection(port, baudRate, address, password)

            if ( self.__fingerprint.verifyPassword() == False ):
                raise ValueError('The given fingerprint sensor password is wrong!')

        except:
            logger.error('The fingerprint sensor could not be initialized!', exc_info=True)
            exit(1)

    """
    "" Shows confirmation dialog.
    ""
    "" @param string question
    "" @return boolean
    """
    def __showConfirmationDialog(self, question = ''):

        answer = raw_input(question +' (Y/n)')

        if ( answer not in ['y', 'Y', ''] ):
            return False
        else:
            return True

    """
    "" Returns stored fingerprint hash for a given name.
    ""
    "" @param string userName
    "" @return string
    """
    def getFingerprintHash(self, userName):

        fingerprintHash = ''

        try:
            fingerprintHash = self.__config.readString('Users', userName)

        except ConfigParser.NoOptionError:
            logger.error('The user "'+ userName +'" does not exist!')

        return fingerprintHash

    """
    "" Enrolls new fingerprint template and adds user to pamfingerprint.
    ""
    "" @param string userName
    "" @return boolean
    """
    def addUser(self, userName):

        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Add user "' + userName + '"?') == False ):
            print 'Adding user canceled.'
            return False

        ## Tries to create new template for user
        try:
            logger.info('Waiting for finger...')    

            while ( self.__fingerprint.readImage() == False ):
                pass

            self.__fingerprint.convertImage(0x01)
            
            ## Gets position of template
            result = self.__fingerprint.searchTemplate()
            positionNumber = result[0]

            ## Invalid position
            if ( positionNumber > 0 ):
                logger.error('Template already exists!')# at position '+ str(positionNumber) +'!')
                return False
    
            logger.info('Remove finger...')
            time.sleep(2)

            logger.info('Waiting for same finger again...')

            while ( self.__fingerprint.readImage() == False ):
                pass

            self.__fingerprint.convertImage(0x02)

            ## Creates new template
            self.__fingerprint.createTemplate()

            ## Gets characteristics and hashes them
            characteristics = self.__fingerprint.downloadCharacteristics(0x02)
            fingerprintHash = hashlib.sha256(str(characteristics)).hexdigest()
            
            ## Gets new position number for template
            positionNumber = self.__fingerprint.getTemplateCount()
            positionNumber = positionNumber + 1
    
            ## Stores new template
            self.__fingerprint.storeTemplate(positionNumber)

        except:
            logger.error('Fingerprint enroll failed!', exc_info=True)
            return False

        ## Append data to config
        if ( fingerprintHash != None ):
            self.__config.writeString('Users', userName, fingerprintHash)

            if ( self.__config.save() == True ):
                logger.info('The user "' + userName + '" has been added successfully!')
                return True
            else:
                logger.error('The configuration could not be written!')
                return False
        else:
            logger.error('Error while adding user "' + userName + '"!')
            return False 

    """
    "" Removes fingerprint template from sensor and removes user from pamfingerprint.
    ""
    "" @param string userName
    "" @return boolean
    """
    def removeUser(self, userName):

        ## Gets fingerprint hash for a user
        expectedFingerprintHash = self.getFingerprintHash(userName)             
        
        ## Checks for invalid hash
        if ( expectedFingerprintHash == '' ):
            return False

        ## Confirmation dialog 
        if ( self.__showConfirmationDialog('Remove user "' + userName + '"?') == False ):
            print 'Removing user canceled.'
            return False
            
        ## Tries to delete template
        try:
            found = False
            
            ## Searches for template hash matches stored hash
            for position in range(self.__fingerprint.getTemplateCount()):
                self.__fingerprint.loadTemplate(position, 0x01)

                ## Gets characteristics and hashes them
                characteristics = self.__fingerprint.downloadCharacteristics(0x01)
                fingerprintHash = hashlib.sha256(str(characteristics)).hexdigest()

                ## Checks if template hash matches saved hash
                if ( fingerprintHash == expectedFingerprintHash ):
                    self.__fingerprint.deleteTemplate(position)
                    found = True
                    break

        except:
            logger.error('Error while removing template!', exc_info=True)
            return False

        ## Checks if template was found
        if ( found == True ):

            ## Remove entries from configuration file
            if ( ( self.__config.remove('Users', userName) == True ) and ( self.__config.save() == True ) ):
                logger.info('The user "' + userName + '" has been removed successfully!')
                return True
            else:
                logger.error('The configuration file could not be written!')
                return False
            
        else:
            logger.error('Template could not be found!')
            return False


if ( __name__ == '__main__' ):

    ## Checks if user is root
    if ( os.geteuid() != 0 ):
        logger.error('You need to have root privileges to run pamfingerprint-conf!')
        exit(1)

    parser = argparse.ArgumentParser(description = 'pamfingerprint configuration:')
    
    parser.add_argument('--add-user', metavar='NAME', help='Adds a new user.')
    parser.add_argument('--remove-user', metavar='NAME', help='Removes an user.')
    parser.add_argument('--version', '-v', action='version', version='pamfingerprint '+ VERSION, help='Print version and exit.')

    args = vars(parser.parse_args())
        
    if ( args['add_user'] ):
        PamFingerprint().addUser(args['add_user'])
    elif ( args['remove_user'] ):
        PamFingerprint().removeUser(args['remove_user'])
    else:
        parser.print_help()
