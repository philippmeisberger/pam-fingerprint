#!/usr/bin/env python

"""
"" PAM Fingerprint
"" Configuration program
""
"" Copyright 2014 Philipp Meisberger, Bastian Raschke.
"" All rights reserved.
"""

import sys 
sys.path.append('/usr/lib')

from pamfingerprint.version import VERSION
from pamfingerprint.classes.Logger import *
from pamfingerprint.classes.Config import *

from PyFingerprint.PyFingerprint import *

import argparse


class PamFingerprint(object):

    """
    "" The fingerprint library object
    "" @var PyFingerprint __fingerprint
    """
    __fingerprint = None

    """
    "" Logger instance
    "" @var Logger __logger
    """
    __logger = None

    """
    "" Config instance
    "" @var Config __config
    """
    __config = None
    
    """
    "" Constructor
    ""
    "" @return void
    """
    def __init__(self):

        ## Tries to init config instance
        try:
            self.__config = Config('/etc/pamfingerprint.conf')

        except Exception as e:
            print 'Exception: ' + str(e)
            exit(1)

        ## Tries to init logger instance
        try:
            logLevel = self.__config.readInteger('Logger', 'level')
            self.__logger = Logger('/var/log/pamfingerprint.log', logLevel)

        except Exception as e:
            print 'Exception: ' + str(e)
            exit(1)

        ## Gets connection values
        port = self.__config.readString('PyFingerprint', 'port')
        baudRate = self.__config.readInteger('PyFingerprint', 'baudRate')
        address = self.__config.readHex('PyFingerprint', 'address')
        password = self.__config.readHex('PyFingerprint', 'password')

        ## Tries to establish connection
        try:
            self.__fingerprint = PyFingerprint(port, baudRate, address, password)

        except Exception as e:
            self.__logger.log(Logger.ERROR, 'Exception: ' + str(e))
            exit(1)

    """
    "" Shows confirmation dialog with choice for yes/no.
    ""
    "" @param string question
    "" @return boolean
    """
    def __showConfirmationDialog(self, question=''):

        ## Confirmation dialog 
        answer = raw_input(question +' (Y/n)')

        if ( answer not in ['y', 'Y', ''] ):
            print 'Canceled.'
            return False
        else:
            return True

    """
    "" Returns user ID for a given name.
    ""
    "" @param string userName
    "" @return integer
    """
    def getUserIdForName(self, userName):

        userId = -1

        try:
            userId = self.__config.readInteger('Users', userName)

        except ConfigParser.NoOptionError:
            self.__logger.log(Logger.ERROR, 'The user "'+ userName +'" does not exist!')

        return userId
        
    """
    "" Enrolls new fingerprint template and adds user to PAM.
    ""
    "" @param string userName
    "" @return boolean
    """
    def addUser(self, userName):

        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Add user ' + userName + '?') == False ):
            return False

        ## Tries to create new template for user
        try:
            result = self.__fingerprint.createTemplate()

        except Exception as e:
            self.__logger.log(Logger.ERROR, 'Exception: ' + str(e))
            return False

        if ( result[0] == True ):
            positionNumber = result[1]
            self.__config.writeString('Users', userName, positionNumber)

            if ( self.__config.save() == True ):
                self.__logger.log(Logger.NOTICE, 'The user "' + userName + '" has been added successfully!')
                return True
            else:
                self.__logger.log(Logger.ERROR, 'The configuration could not be written!')
                return False
        else:
            self.__logger.log(Logger.ERROR, 'Error while adding user "' + userName + '"!')
            return False 

    """
    "" Removes fingerprint template from sensor and removes user from PAM.
    ""
    "" @param string userName
    "" @return boolean
    """
    def removeUser(self, userName):

        ## Gets user ID
        userId = self.getUserIdForName(userName)             
        
        if ( userId == -1 ):
            return False

        ## Confirmation dialog 
        if ( self.__showConfirmationDialog('Remove user ' + userName + '?') == False ):
            return False
            
        ## Tries to delete template
        try:
            result = self.__fingerprint.deleteTemplate(userId)

        except Exception as e:
            self.__logger.log(Logger.ERROR, 'Exception: ' + str(e))
            return False

        if ( result == True ):
            
            if ( self.__config.remove('Users', userName) == True and self.__config.save() == True ):
                self.__logger.log(Logger.NOTICE, 'The user "' + userName + '" has been removed successfully!')
                return True
            else:
                self.__logger.log(Logger.ERROR, 'The configuration could not be written!')
                return False

        else:
            self.__logger.log(Logger.ERROR, 'Error while removing user "' + userName + '"!')
            return False       

    """
    "" Updates fingerprint for a given user name.
    ""
    "" @param string userName
    "" @return boolean
    ""
    def update(self, userName):

        ## Checks if user found on sensor database
        if ( self.check(userName) == False ):
            return False
        
        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Update user ' + userName + '?') == False ):
            return False

        ## Gets user ID
        userId = self.getUserIdForName(userName)
        
        ## Tries to delete template
        try:
            result = self.__fingerprint.deleteTemplate(userId)

        except Exception as e:
            self.__logger.log(Logger.ERROR, 'Exception: ' + str(e))
            return False

        ## Tries to enroll new template
        if ( self.addUser(userName) == True ):
            self.__logger.log(Logger.NOTICE, 'The user "'+ userName +'" has been updated successfully!')
            return True
        else:
            self.__logger.log(Logger.ERROR, 'Error while updating user "' + userName + '"!')
            return False
    """
    """
    "" Checks fingerprint for a given user name.
    ""
    "" @param string userName
    "" @return boolean
    """
    def checkUser(self, userName):

        print 'pamfingerprint '+ VERSION +': Waiting for finger...'
        
        ## Gets user ID
        userId = self.getUserIdForName(userName)
        
        if ( userId == -1 ):
            return False

        ## Tries to check fingerprint
        try:
            result = self.__fingerprint.searchTemplate()

        except Exception as e:
            self.__logger.log(Logger.ERROR, 'Exception: ' + str(e))
            return False

        if ( result[0] == False ):
            self.__logger.log(Logger.NOTICE, 'No match found!')
            positionNumber = -1
        else:
            positionNumber = result[1]

        ## Checks if user ID matches template ID
        if ( userId == positionNumber ):
            self.__logger.log(Logger.NOTICE, 'Check for user ' + userName + ' was successful!')
            return True

        self.__logger.log(Logger.ERROR, 'Check for user ' + userName + ' failed!')
        return False


## Main
## Checks if user is root
if ( os.geteuid() != 0 ):
    exit("You need to have root privileges to run pamfingerprint-conf!\n")

parser = argparse.ArgumentParser(description = 'pamfingerprint configuration:')

parser.add_argument('--add-user', metavar='NAME', help='Adds a new user.')
parser.add_argument('--remove-user', metavar='NAME', help='Removes an user.')
#parser.add_argument('--update', metavar='NAME', help='Updates fingerprint for an existing user.')
parser.add_argument('--check-user', metavar='NAME', help='Checks fingerprint for an existing user.')
parser.add_argument('--version', '-v', action='version', version='pamfingerprint '+ VERSION, help='Print version and exit.')

args = vars(parser.parse_args())
    
if ( args['add_user'] ):
    PamFingerprint().addUser(args['add_user'])
elif ( args['remove_user'] ):
    PamFingerprint().removeUser(args['remove_user'])
#elif ( args['update'] ):
#    PamFingerprint().update(args['update'])
elif ( args['check_user'] ):
    PamFingerprint().checkUser(args['check_user'])
else:
    parser.print_help()
