#!/usr/bin/env python

"""
"" pamfingerprint
"" Configuration program.
""
"" Copyright 2014 Philipp Meisberger, Bastian Raschke.
"" All rights reserved.
"""

import sys 
sys.path.append('/usr/lib')

from pamfingerprint.version import VERSION
from pamfingerprint.Config import *

from PyFingerprint.PyFingerprint import *

import argparse
import os

import logging

## Configures logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

## Creates and adds an output handler to logger
strmHandler = logging.StreamHandler()
strmHandler.setLevel(logging.DEBUG)
strmHandler.setFormatter(logging.Formatter('[%(levelname)s] %(message)s'))
logger.addHandler(strmHandler)


class PamFingerprint(object):

    """
    "" The PyFingerprint instance
    "" @var PyFingerprint __fingerprint
    """
    __fingerprint = None

    """
    "" Config instance
    "" @var Config __config
    """
    __config = None
    
    """
    "" Constructor
    ""
    "" @return void
    """
    def __init__(self):

        ## Tries to init config instance
        try:
            self.__config = Config('/etc/pamfingerprint.conf')

        except Exception, e:
            logger.error(e.message, exc_info=True)
            exit(1)

        ## Gets connection values
        port = self.__config.readString('PyFingerprint', 'port')
        baudRate = self.__config.readInteger('PyFingerprint', 'baudRate')
        address = self.__config.readHex('PyFingerprint', 'address')
        password = self.__config.readHex('PyFingerprint', 'password')

        ## Tries to establish connection
        try:
            self.__fingerprint = PyFingerprint(port, baudRate, address, password)

        except Exception, e:
            logger.error(e.message, exc_info=True)
            exit(1)

    """
    "" Shows confirmation dialog.
    ""
    "" @param string question
    "" @return boolean
    """
    def __showConfirmationDialog(self, question = ''):

        answer = raw_input(question +' (Y/n)')

        if ( answer not in ['y', 'Y', ''] ):
            return False
        else:
            return True

    """
    "" Returns user ID for a given name.
    ""
    "" @param string userName
    "" @return integer
    """
    def getUserIdForName(self, userName):

        userId = -1

        try:
            userId = self.__config.readInteger('Users', userName)

        except ConfigParser.NoOptionError:
            logger.error('The user "' + userName + '" does not exist!', exc_info=False)

        return userId

    """
    "" Enrolls new fingerprint template and adds user to pamfingerprint.
    ""
    "" @param string userName
    "" @return boolean
    """
    def addUser(self, userName):

        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Add user "' + userName + '"?') == False ):
            print 'Adding user canceled.'
            return False

        ## Tries to create new template for user
        try:
            result = self.__fingerprint.createTemplate()

        except Exception, e:
            logger.error(e.message, exc_info=True)
            return False

        if ( result[0] == True ):
            positionNumber = result[1]
            self.__config.writeString('Users', userName, positionNumber)

            if ( self.__config.save() == True ):
                logger.info('The user "' + userName + '" has been added successfully!')
                return True
            else:
                logger.error('The configuration could not be written!', exc_info=False)
                return False

        else:
            logger.error('Error while adding user "' + userName + '"!', exc_info=False)
            return False 

    """
    "" Removes fingerprint template from sensor and removes user from pamfingerprint.
    ""
    "" @param string userName
    "" @return boolean
    """
    def removeUser(self, userName):

        ## Gets user ID
        userId = self.getUserIdForName(userName)             
        
        if ( userId == -1 ):
            return False

        ## Confirmation dialog 
        if ( self.__showConfirmationDialog('Remove user "' + userName + '"?') == False ):
            print 'Removing user canceled.'
            return False
            
        ## Tries to delete template
        try:
            result = self.__fingerprint.deleteTemplate(userId)

        except Exception, e:
            logger.error(e.message, exc_info=True)
            return False

        if ( result == True ):

            if ( self.__config.remove('Users', userName) == True and self.__config.save() == True ):
                logger.info('The user "' + userName + '" has been removed successfully!')
                return True
            else:
                logger.error('The configuration could not be written!', exc_info=True)
                return False

        else:
            logger.error('Error while removing user "' + userName + '"!', exc_info=True)
            return False


if ( __name__ == '__main__' ):

    ## Checks if user is root
    if ( os.geteuid() != 0 ):
        logger.error('You need to have root privileges to run pamfingerprint-conf!', exc_info=False)
        exit(1)

    parser = argparse.ArgumentParser(description = 'pamfingerprint configuration:')
    
    parser.add_argument('--add-user', metavar='NAME', help='Adds a new user.')
    parser.add_argument('--remove-user', metavar='NAME', help='Removes an user.')
    parser.add_argument('--version', '-v', action='version', version='pamfingerprint '+ VERSION, help='Print version and exit.')

    args = vars(parser.parse_args())
        
    if ( args['add_user'] ):
        PamFingerprint().addUser(args['add_user'])
    elif ( args['remove_user'] ):
        PamFingerprint().removeUser(args['remove_user'])
    else:
        parser.print_help()
