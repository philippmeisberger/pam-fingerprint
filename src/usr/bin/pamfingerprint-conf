#!/usr/bin/env python

"""
"" pamfingerprint
"" Configuration program.
""
"" Copyright 2014 Philipp Meisberger, Bastian Raschke.
"" All rights reserved.
"""

import sys 
sys.path.append('/usr/lib')

from pamfingerprint.version import VERSION
from pamfingerprint.Config import *

from PyFingerprint.PyFingerprint import *

import hashlib
import time
import argparse
import os


class PamFingerprint(object):

    """
    "" The PyFingerprint instance
    "" @var PyFingerprint __fingerprint
    """
    __fingerprint = None

    """
    "" Config instance
    "" @var Config __config
    """
    __config = None
    
    """
    "" Constructor
    ""
    "" @return void
    """
    def __init__(self):

        ## Tries to init config instance
        try:
            self.__config = Config('/etc/pamfingerprint.conf')

        except Exception as e:
            print '[Exception] ' + e.message
            exit(1)

        ## Gets connection values
        port = self.__config.readString('PyFingerprint', 'port')
        baudRate = self.__config.readInteger('PyFingerprint', 'baudRate')
        address = self.__config.readHex('PyFingerprint', 'address')
        password = self.__config.readHex('PyFingerprint', 'password')

        ## Tries to establish connection
        try:
            self.__fingerprint = PyFingerprint(port, baudRate, address, password)

            if ( self.__fingerprint.verifyPassword() == False ):
                raise ValueError('The given fingerprint sensor password is wrong!')

        except (Exception, ValueError) as e:
            print '[Exception] The fingerprint sensor could not be initialized: ' + e.message
            exit(1)
    
    """
    "" Shows confirmation dialog.
    ""
    "" @param string question
    "" @return boolean
    """
    def __showConfirmationDialog(self, question = ''):

        answer = raw_input(question + ' (Y/n)')

        if ( answer not in ['y', 'Y', ''] ):
            return False
        else:
            return True

    """
    "" Prints current template count.
    ""
    "" @return void
    """
    def templateCount(self):

        print 'Current number of stored templates: ' + str(self.__fingerprint.getTemplateCount())

    """
    "" Enrolls new fingerprint template and adds user to pamfingerprint.
    ""
    "" @param string userName
    "" @return boolean
    """
    def addUser(self, userName):

        ## Checks if user is root
        if ( os.geteuid() != 0 ):
            print '[Error] You need to have root privileges to add a user!'
            return False

        if ( self.__config.itemExists('Users', userName) ):
            print '[Error] The user "' + userName + '" already exists!'
            return False
        
        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Are you sure you want to add the user "' + userName + '"?') == False ):
            print 'Adding user canceled.'
            return False

        ## Tries to create new template for user
        try:
            ## Gets a boolean list for templates 0-255 indicating the valid status
            templates = self.__fingerprint.getTemplateIndex(0)
            
            ## Tries to find free position for storing template
            for i in range(len(templates)):
                if ( templates[i] == False ):
                    freePositionNumber = i

            if ( freePositionNumber != None ):
                raise ValueError('Could not find a free position for storing template!')
            
            print 'Waiting for finger...'

            while ( self.__fingerprint.readImage() == False ):
                pass

            self.__fingerprint.convertImage(0x01)
            
            ## Checks if template of read finger already exist
            result = self.__fingerprint.searchTemplate()
            positionNumber = result[0]

            if ( positionNumber >= 0 ):
                print '[Error] The finger already exists at template position #' + str(positionNumber) + '!'
                return False
    
            print 'Remove finger...'
            time.sleep(2)

            print 'Waiting for same finger again...'

            while ( self.__fingerprint.readImage() == False ):
                pass

            self.__fingerprint.convertImage(0x02)

            ## Creates new template
            self.__fingerprint.createTemplate()
            
            ## Gets new position number for template (the counting starts at 0, so we do not need to increment)
            #positionNumber = self.__fingerprint.getTemplateCount()
            
            ## Stores new template on free position
            self.__fingerprint.storeTemplate(freePositionNumber)
            print 'Stored new template on position #' + str(freePositionNumber)

            ## Gets characteristics and calculates hash
            self.__fingerprint.loadTemplate(freePositionNumber, 0x01)
            characteristics = self.__fingerprint.downloadCharacteristics(0x01)
            fingerprintHash = hashlib.sha256(str(characteristics)).hexdigest()
            
            ## Appends data to config
            self.__config.writeString('Users', userName, fingerprintHash)

            if ( self.__config.save() == True ):
                print 'The user "' + userName + '" has been added successfully!'
            else:
                raise Exception('The configuration could not be written!')

        except (Exception, ValueError) as e:
            print '[Exception] Error while adding user "' + userName + '": ' + e.message
            return False

        return True

    """
    "" Removes fingerprint template from sensor and removes user from configuration.
    ""
    "" @param string userName
    "" @return boolean
    """
    def removeUser(self, userName):

        ## Checks if user is root
        if ( os.geteuid() != 0 ):
            print '[Error] You need to have root privileges to add a user!'
            return False
        
        ## Tries to get fingerprint hash of user
        try:
            expectedFingerprintHash = self.__config.readString('Users', userName)

        except ConfigParser.NoOptionError:
            print '[Error] The user "' + userName + '" does not exist!'
            return False

        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Are you sure you want to remove the user "' + userName + '"?') == False ):
            print 'Removing user canceled.'
            return False
            
        ## Tries to delete template
        try:
            found = False
            templateCount = self.__fingerprint.getTemplateCount()
            
            ## Searches for template hash matches stored hash
            for positionNumber in range(0, templateCount + 1):

                try:
                    ## Gets characteristics and calculates hash
                    self.__fingerprint.loadTemplate(positionNumber, 0x01)
                    characteristics = self.__fingerprint.downloadCharacteristics(0x01)
                    fingerprintHash = hashlib.sha256(str(characteristics)).hexdigest()
                
                    ## Checks if template hash matches saved hash
                    if ( fingerprintHash == expectedFingerprintHash ):
                        self.__fingerprint.deleteTemplate(positionNumber)
                        print 'Removed template on position: ' + str(positionNumber)
                        print 'There are actual ' + str(templateCount - 1) +' templates stored on sensor.'
                        found = True
                        break
                        
                except Exception as e:
                    print '[Exception] ' + e.message + ' (Position: ' + str(positionNumber) + ')'

            ## Checks if template was found
            if ( found == True ):

                ## Remove entries from configuration file
                if ( ( self.__config.remove('Users', userName) == True ) and ( self.__config.save() == True ) ):
                    print 'The user "' + userName + '" has been removed successfully!'
                else:
                    raise Exception('The configuration file could not be written!')
                
            else:
                raise Exception('Template could not be found!')
            
        except (Exception, ValueError) as e:
            print '[Exception] Error while removing user "' + userName + '": ' + e.message
            return False

        return True


if ( __name__ == '__main__' ):

    parser = argparse.ArgumentParser(description = 'pamfingerprint configuration program:')
    
    parser.add_argument('--add-user', metavar='NAME', help='Adds a new user.')
    parser.add_argument('--remove-user', metavar='NAME', help='Removes a user.')
    parser.add_argument('--version', '-v', action='version', version='pamfingerprint '+ VERSION, help='Prints version and exits.')

    args = vars(parser.parse_args())
   
    if ( args['add_user'] ):
        PamFingerprint().addUser(args['add_user'])
    elif ( args['remove_user'] ):
        PamFingerprint().removeUser(args['remove_user'])
    else:
        parser.print_help()
