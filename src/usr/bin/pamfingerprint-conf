#!/usr/bin/env python

"""
"" PAM Fingerprint
"" Configuration program
""
"" Copyright 2014 Philipp Meisberger, Bastian Raschke.
"" All rights reserved.
"""

import sys 
sys.path.append('/usr/lib')

from pamfingerprint.version import VERSION
from pamfingerprint.classes.Logger import *
from pamfingerprint.classes.Config import *
from PyFingerprint.PyFingerprint import *

import argparse


class PamFingerprint(object):

    """
    "" The fingerprint library object
    "" @var PyFingerprint __fingerprint
    """
    __fingerprint = None

    """
    "" Logger instance
    "" @var Logger __logger
    """
    __logger = None

    """
    "" Config instance
    "" @var Config __config
    """
    __config = None
    
    """
    "" Constructor
    ""
    "" @return void
    """
    def __init__(self):

        ## Tries to init config instance
        try:
            self.__config = Config('/etc/pamfingerprint.conf')

        except Exception as e:
            print 'Exception: '+ str(e)
            exit(1)

        ## Tries to init logger instance
        try:
            logLevel = self.__config.readInteger('Logger', 'level')
            self.__logger = Logger('/var/log/pamfingerprint.log', logLevel)

        except Exception as e:
            print 'Exception: '+ str(e)
            exit(1)

        ## Gets connection values
        port = self.__config.readString('PyFingerprint', 'port')
        baudRate = self.__config.readInteger('PyFingerprint', 'baudRate')
        address = self.__config.readHex('PyFingerprint', 'address')
        password = self.__config.readHex('PyFingerprint', 'password')

        ## Tries to establish connection
        try:
            self.__fingerprint = PyFingerprint(port, baudRate, address, password)

        except Exception as e:
            self.__logger.log(Logger.ERROR, 'Exception: '+ str(e))
            exit(1)

    """
    "" Returns ID of user for a given name.
    ""
    "" @param string userName
    "" @return integer
    """
    def __getIdForName(self, userName):

        userId = -1
        
        try:
            userId = self.__config.readInteger('Users', userName)

        except ConfigParser.NoOptionError:
            self.__logger.log(Logger.ERROR, 'User "'+ userName +'" does not exist!')

        return userId
        
    """
    "" Adds new user and enrolls new fingerprint image.
    ""
    "" @param string name
    "" @return boolean
    """
    def addUser(self, userName):

        ## Tries to create new template for user
        try:
            result = self.__fingerprint.createTemplate()

        except Exception as e:
            self.__logger.log(Logger.ERROR, 'Exception: '+ str(e))
            return False

        positionNumber = result[1]
        
        ## Store tuple <userName> = <template ID> to config
        if ( result[0] == True ):
            self.__config.writeString('Users', userName, positionNumber)
            self.__logger.log(Logger.NOTICE, 'User '+ userName +' added successfully!')
            return True
        else:
            self.__logger.log(Logger.ERROR, 'Error while adding user '+ userName +'!')
            return False 
        
    """
    "" Removes an user from the fingerprint database.
    ""
    "" @param string name
    "" @return boolean
    """
    def removeUser(self, userName):

        ## Gets user ID
        userId = self.__getIdForName(userName)             
        
        if ( userId == -1 ):
            return False

        ## Confirmation dialog 
        answer = raw_input('Remove user ' + userName + '? (Y/n)')

        if ( not answer in ['y', 'Y', ''] ):
            print 'Abort!'
            return False
            
        ## Tries to delete template
        try:
            result = self.__fingerprint.deleteTemplate(userId)

        except Exception as e:
            self.__logger.log(Logger.ERROR, 'Exception: '+ str(e))
            return False

        if ( result == False ):
            self.__logger.log(Logger.ERROR, 'Template could not be removed!')
            return False
            
        ## Removes user from config
        if ( self.__config.remove('Users', userName) == True ):
            self.__logger.log(Logger.NOTICE, 'User '+ userName +' removed successfully!')
            return True
        else:
            self.__logger.log(Logger.ERROR, 'Error while removing user '+ userName +'!')
            return False        

    """
    "" Updates fingerprint for an existing user.
    ""
    "" @param string userName
    "" @return boolean
    """
    def update(self, userName):

        pass        

    """
    "" Checks fingerprint for a given user name.
    ""
    "" @param string userName
    "" @return boolean
    """
    def check(self, userName):

        ## Gets user ID
        expectedId = self.__getIdForName(userName)             
        
        if ( expectedId == -1 ):
            return False
        
        ## Tries to check fingerprint
        try:
            result = self.__fingerprint.searchTemplate()

        except Exception as e:
            self.__logger.log(Logger.ERROR, 'Exception: '+ str(e))
            return False

        if ( result[0] == False ):
            self.__logger.log(Logger.NOTICE, 'No match found!')
            return False
        
        positionNumber = result[1]

        ## Checks if user ID matches template ID
        if ( expectedId == positionNumber ):
            self.__logger.log(Logger.NOTICE, 'Check for user '+ userName +' was successful!')
            return True
        
        self.__logger.log(Logger.ERROR, 'Check for user '+ userName +' failed!')
        return False

## Main
parser = argparse.ArgumentParser(description='pamfingerprint configuration:')
parser.add_argument('--add-user', metavar='NAME', help='Adds a new user.')
parser.add_argument('--remove-user', metavar='NAME', help='Removes an user.')
parser.add_argument('--update', metavar='NAME', help='Updates fingerprint for an existing user.')
parser.add_argument('--check', metavar='NAME', help='Checks fingerprint for an existing user.')
parser.add_argument('--version', nargs='?', const=True, help='Prints version and exists.')

args = vars(parser.parse_args())

if ( args['add_user'] ):
    PamFingerprint().addUser(args['add_user'])
elif ( args['remove_user'] ):
    PamFingerprint().removeUser(args['remove_user'])
elif ( args['update'] ):
    PamFingerprint().update(args['update'])
elif ( args['check'] ):
    PamFingerprint().check(args['check'])
elif ( args['version'] ):
    print 'pamfingerprint version '+ VERSION
else:
    parser.print_help()
