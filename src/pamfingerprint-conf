#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
PAM Fingerprint configuration program

Copyright 2014 Philipp Meisberger <team@pm-codeworks.de>,
               Bastian Raschke <bastian.raschke@posteo.de>
All rights reserved.
"""

import hashlib
import time
import argparse
import os
import pwd
from configparser import ConfigParser

from pamfingerprint import __version__ as version
from pamfingerprint import CONFIG_FILE
from pyfingerprint.pyfingerprint import PyFingerprint


class PamFingerprint:
    """Configuration program."""
    __fingerprint = None
    __config = None

    def __init__(self):

        # Tries to read configuration
        try:
            # Checks if path/file is readable
            if not os.access(CONFIG_FILE, os.R_OK):
                raise Exception('The configuration file "{0}" is not readable!'.format(CONFIG_FILE))

            self.__config = ConfigParser()
            self.__config.read(CONFIG_FILE)

        except Exception as e:
            print('[Exception] {0}'.format(e))
            exit(1)

        try:
            # Gets connection values
            port = self.__config.get('PyFingerprint', 'port')
            baud_rate = int(self.__config.get('PyFingerprint', 'baudRate'), 10)
            address = int(self.__config.get('PyFingerprint', 'address'), 16)
            password = int(self.__config.get('PyFingerprint', 'password'), 16)

            # Tries to establish connection
            self.__fingerprint = PyFingerprint(port, baud_rate, address, password)

            if not self.__fingerprint.verifyPassword():
                raise ValueError('The given fingerprint sensor password is wrong!')

        except Exception as e:
            print('[Exception] The fingerprint sensor could not be initialized: {0}'.format(e))
            exit(1)

    def __show_confirmation_dialog(self, question=''):
        """
        Shows confirmation dialog.

        :param question:
        :return: boolean
        """

        answer = input(question + ' (Y/n)')

        if answer not in ['y', 'Y', '']:
            return False
        else:
            return True

    def add_user(self, username):
        """
        Enrolls new fingerprint template and adds user to PAM Fingerprint.

        :param username:
        :return: boolean
        """

        # Checks if user is root
        if os.geteuid() != 0:
            print('[Error] You need to have root privileges to add a user!')
            return False

        # Checks if the user is not already added
        if self.__config.has_option('Users', username):
            print('[Error] The user "{0}" is already added!'.format(username))
            return False

        # Confirmation dialog
        if not self.__show_confirmation_dialog('Are you sure you want to add the user "{0}" ?'.format(username)):
            print('Adding user canceled.')
            return False

        # Tries to create new template for user
        try:
            # Check if system user exists?
            pwd.getpwnam(username)

            print('Waiting for finger...')

            while not self.__fingerprint.readImage():
                pass

            self.__fingerprint.convertImage(0x01)

            # Checks if template of read finger already exist
            result = self.__fingerprint.searchTemplate()
            position_number = result[0]

            # Template does not exist
            if position_number == -1:
                print('Remove finger...')
                time.sleep(2)

                print('Waiting for same finger again...')

                while not self.__fingerprint.readImage():
                    pass

                self.__fingerprint.convertImage(0x02)

                # Same finger?
                if self.__fingerprint.compareCharacteristics() == 0:
                    raise Exception('Fingers are not the same!')

                # Creates new template
                self.__fingerprint.createTemplate()

                # Stores new template at free position
                position_number = self.__fingerprint.storeTemplate()
                print('Stored new template on position #{0}.'.format(position_number))
            else:
                print('[Warning] The finger already exists at template position #{0}!'.format(position_number))

                if not self.__show_confirmation_dialog('Bind this template to the user "{0}" ?'.format(username)):
                    print('Adding user canceled.')
                    return False

            # Gets characteristics and calculates hash
            self.__fingerprint.loadTemplate(position_number, 0x01)
            characteristics = self.__fingerprint.downloadCharacteristics(0x01)
            fingerprint_hash = hashlib.sha256(str(characteristics).encode('utf-8')).hexdigest()

            # The new user information list
            user_data = (
                str(position_number),
                fingerprint_hash,
            )

            # Adds user to configuration file
            self.__config.set('Users', username, ','.join(user_data))

            if os.access(CONFIG_FILE, os.W_OK):
                f = open(CONFIG_FILE, 'w')
                self.__config.write(f)
                f.close()
                print('The user "{0}" has been added successfully!'.format(username))
            else:
                raise Exception('The configuration could not be written!')

        except Exception as e:
            print('[Exception] Error while adding user: {0}'.format(e))
            return False

        return True

    def remove_user(self, username):
        """
        Removes fingerprint template from sensor and removes user from configuration.

        :param username:
        :return: boolean
        """

        # Checks if user is root
        if os.geteuid() != 0:
            print('[Error] You need to have root privileges to remove a user!')
            return False

        # Checks if the user was already added
        if not self.__config.has_option('Users', username):
            print('[Error] The user "{0}" is not added!'.format(username))
            return False

        # Tries to get user information (template position, fingerprint hash)
        try:
            user_data = self.__config.get('Users', username).split(',')

            # Validates user information
            if len(user_data) != 2:
                raise Exception('The user information of "{0}" is invalid!'.format(username))

            position_number = int(user_data[0])
            expected_fingerprint_hash = user_data[1]

        except Exception as e:
            print('[Exception] {0}'.format(e))
            return False

        # Confirmation dialog
        if not self.__show_confirmation_dialog('Are you sure you want to remove the user "{0}" ?'.format(username)):
            print('Removing user canceled.')
            return False

        # Tries to delete template
        try:
            # Gets characteristics
            self.__fingerprint.loadTemplate(position_number, 0x01)
            characteristics = self.__fingerprint.downloadCharacteristics(0x01)

            # Calculates hash of template
            fingerprint_hash = hashlib.sha256(str(characteristics).encode('utf-8')).hexdigest()

            # Checks if template hash matches stored hash
            if fingerprint_hash == expected_fingerprint_hash:
                self.__fingerprint.deleteTemplate(position_number)
                print('Removed template on position #{0}.'.format(position_number))
            else:
                raise Exception('The template could not be found!')

            # Removes entries from configuration file
            if self.__config.remove_option('Users', username) and os.access(CONFIG_FILE, os.W_OK):
                f = open(CONFIG_FILE, 'w')
                self.__config.write(f)
                f.close()
                print('The user "{0}" has been removed successfully!'.format(username))
            else:
                raise Exception('The configuration file could not be written!')

        except Exception as e:
            print('[Exception] Error while removing user: {0}'.format(e))
            return False

        return True

    def check_user(self, username):
        """Executes a fingerprint check for a given user.

        :param username:
        :return: boolean
        """

        # Checks if the user was already added
        if not self.__config.has_option('Users', username):
            print('[Error] The user "{0}" is not added!'.format(username))
            return False

        # Tries to get user information (template position, fingerprint hash)
        try:
            user_data = self.__config.get('Users', username).split(',')

            # Validates user information
            if len(user_data) != 2:
                raise Exception('The user information of "{0}" is invalid!'.format(username))

            expected_position_number = int(user_data[0])
            expected_fingerprint_hash = user_data[1]

        except Exception as e:
            print('[Exception] {0}'.format(e))
            return False

        # Tries to check fingerprint
        try:
            print('Waiting for finger...')

            while not self.__fingerprint.readImage():
                pass

            self.__fingerprint.convertImage(0x01)

            # Gets position and accuracy score of template
            result = self.__fingerprint.searchTemplate()
            position_number = result[0]
            accuracy_score = result[1]

            # Checks if the template position is invalid
            if position_number == -1:
                raise Exception('No match found!')

            # Checks if the template position is correct
            if position_number == expected_position_number:
                print('A match was found on template position #{0} with accuracy score {1}.'.format(position_number, accuracy_score))
            else:
                raise Exception('The template position of the found match (#{0}) is not equal to the stored one (#{1})!'
                                .format(position_number, expected_position_number))

            # Gets characteristics
            self.__fingerprint.loadTemplate(position_number, 0x01)
            characteristics = self.__fingerprint.downloadCharacteristics(0x01)

            # Calculates hash of template
            print('Calculating hash...')
            fingerprint_hash = hashlib.sha256(str(characteristics).encode('utf-8')).hexdigest()

            print('Checking if calculated hash matches stored hash...')

            # Checks if read hash matches stored hash
            if fingerprint_hash == expected_fingerprint_hash:
                print('Hashes match!')
                print('Check for user "{0}" was successful!'.format(username))
            else:
                raise Exception('The found template is not assigned to user (the hash does not match)!')

        except Exception as e:
            print('[Exception] Check for user "{0}" failed: {1}"'.format(username, e))
            return False

        return True


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='PAM Fingerprint configuration program:')

    parser.add_argument('--add-user', metavar='NAME', help='Adds a new user.')
    parser.add_argument('--remove-user', metavar='NAME', help='Removes a user.')
    parser.add_argument('--check-user', metavar='NAME', help='Checks fingerprint for an existing user.')
    parser.add_argument('--version', '-v', action='version', version='PAM Fingerprint {0}'.format(version),
                        help='Prints version and exits.')

    args = vars(parser.parse_args())

    if args['add_user']:
        PamFingerprint().add_user(args['add_user'])
    elif args['remove_user']:
        PamFingerprint().remove_user(args['remove_user'])
    elif args['check_user']:
        PamFingerprint().check_user(args['check_user'])
    else:
        parser.print_help()
