#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
PAM Fingerprint configuration program

Copyright 2014 Philipp Meisberger <team@pm-codeworks.de>,
               Bastian Raschke <bastian.raschke@posteo.de>
All rights reserved.
"""

import hashlib
import time
import argparse
import os
import ConfigParser

from pamfingerprint import __version__ as VERSION
from pamfingerprint import CONFIG_FILE
from pyfingerprint.pyfingerprint import PyFingerprint


class PamFingerprint(object):
    """
    Configuration program.

    The PyFingerprint instance
    @var PyFingerprint __fingerprint

    Config instance
    @var Config __config
    """
    __fingerprint = None
    __config = None

    def __init__(self):
        """
        Constructor

        """

        ## Tries to read configuration
        try:
            ## Checks if path/file is readable
            if ( os.access(CONFIG_FILE, os.R_OK) == False ):
                raise Exception('The configuration file "' + CONFIG_FILE + '" is not readable!')

            self.__config = ConfigParser.ConfigParser()
            self.__config.read(CONFIG_FILE)

        except Exception as e:
            print('[Exception] ' + str(e))
            exit(1)

        try:
            ## Gets connection values
            port = self.__config.get('PyFingerprint', 'port')
            baudRate = int(self.__config.get('PyFingerprint', 'baudRate'), 10)
            address = int(self.__config.get('PyFingerprint', 'address'), 16)
            password = int(self.__config.get('PyFingerprint', 'password'), 16)

            ## Tries to establish connection
            self.__fingerprint = PyFingerprint(port, baudRate, address, password)

            if ( self.__fingerprint.verifyPassword() == False ):
                raise ValueError('The given fingerprint sensor password is wrong!')

        except Exception as e:
            print('[Exception] The fingerprint sensor could not be initialized: ' + str(e))
            exit(1)

    def __showConfirmationDialog(self, question = ''):
        """
        Shows confirmation dialog.

        @param string question
        @return boolean
        """

        answer = raw_input(question + ' (Y/n)')

        if ( answer not in ['y', 'Y', ''] ):
            return False
        else:
            return True

    def addUser(self, userName):
        """
        Enrolls new fingerprint template and adds user to PAM Fingerprint.

        @param string userName
        @return boolean
        """

        ## Checks if user is root
        if ( os.geteuid() != 0 ):
            print('[Error] You need to have root privileges to add a user!')
            return False

        ## Checks if the the user is not already added
        if ( self.__config.has_option('Users', userName) == True ):
            print('[Error] The user "' + userName + '" is already added!')
            return False

        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Are you sure you want to add the user "' + userName + '"?') == False ):
            print('Adding user canceled.')
            return False

        ## Tries to create new template for user
        try:
            print('Waiting for finger...')

            while ( self.__fingerprint.readImage() == False ):
                pass

            self.__fingerprint.convertImage(0x01)

            ## Checks if template of read finger already exist
            result = self.__fingerprint.searchTemplate()
            positionNumber = result[0]

            ## Template does not exist
            if ( positionNumber == -1 ):
                print('Remove finger...')
                time.sleep(2)

                print('Waiting for same finger again...')

                while ( self.__fingerprint.readImage() == False ):
                    pass

                self.__fingerprint.convertImage(0x02)

                ## Same finger?
                if ( self.__fingerprint.compareCharacteristics() == 0 ):
                    raise Exception('Fingers are not the same!')

                ## Creates new template
                self.__fingerprint.createTemplate()

                ## Stores new template at free position
                positionNumber = self.__fingerprint.storeTemplate()
                print('Stored new template on position #' + str(positionNumber) + '.')
            else:
                print('[Warning] The finger already exists at template position #' + str(positionNumber) + '!')

                if ( self.__showConfirmationDialog('Bind this template to the user "' + userName + '" ?') == False ):
                    print('Adding user canceled.')
                    return False

            ## Gets characteristics and calculates hash
            self.__fingerprint.loadTemplate(positionNumber, 0x01)
            characteristics = self.__fingerprint.downloadCharacteristics(0x01)
            fingerprintHash = hashlib.sha256(str(characteristics)).hexdigest()

            ## The new user information list
            userData = (
                str(positionNumber),
                fingerprintHash,
            )

            ## Adds user to configuration file
            self.__config.set('Users', userName, ','.join(userData))

            if ( os.access(CONFIG_FILE, os.W_OK) == True ):
                f = open(CONFIG_FILE, 'w')
                self.__config.write(f)
                f.close()
                print('The user "' + userName + '" has been added successfully!')
            else:
                raise Exception('The configuration could not be written!')

        except Exception as e:
            print('[Exception] Error while adding user: ' + str(e))
            return False

        return True

    def removeUser(self, userName):
        """
        Removes fingerprint template from sensor and removes user from configuration.

        @param string userName
        @return boolean
        """

        ## Checks if user is root
        if ( os.geteuid() != 0 ):
            print('[Error] You need to have root privileges to remove a user!')
            return False

        ## Checks if the the user was already added
        if ( self.__config.has_option('Users', userName) == False ):
            print('[Error] The user "' + userName + '" is not added!')
            return False

        ## Tries to get user information (template position, fingerprint hash)
        try:
            userData = self.__config.get('Users', userName).split(',')

            ## Validates user information
            if ( len(userData) != 2 ):
                raise Exception('The user information of "' + userName + '" is invalid!')

            positionNumber = int(userData[0])
            expectedFingerprintHash = userData[1]

        except Exception as e:
            print('[Exception] ' + str(e))
            return False

        ## Confirmation dialog
        if ( self.__showConfirmationDialog('Are you sure you want to remove the user "' + userName + '"?') == False ):
            print('Removing user canceled.')
            return False

        ## Tries to delete template
        try:
            ## Gets characteristics
            self.__fingerprint.loadTemplate(positionNumber, 0x01)
            characteristics = self.__fingerprint.downloadCharacteristics(0x01)

            ## Calculates hash of template
            fingerprintHash = hashlib.sha256(str(characteristics)).hexdigest()

            ## Checks if template hash matches stored hash
            if ( fingerprintHash == expectedFingerprintHash ):
                self.__fingerprint.deleteTemplate(positionNumber)
                print('Removed template on position #' + str(positionNumber) + '.')
            else:
                raise Exception('The template could not be found!')

            ## Removes entries from configuration file
            if ( self.__config.remove_option('Users', userName) == True ) and ( os.access(CONFIG_FILE, os.W_OK) == True ):
                f = open(CONFIG_FILE, 'w')
                self.__config.write(f)
                f.close()
                print('The user "' + userName + '" has been removed successfully!')
            else:
                raise Exception('The configuration file could not be written!')

        except Exception as e:
            print('[Exception] Error while removing user: ' + str(e))
            return False

        return True

    def checkUser(self, userName):
        """
        Executes a fingerprint check for a given user.

        @param string userName
        @return boolean
        """

        ## Checks if the the user was already added
        if ( self.__config.has_option('Users', userName) == False ):
            print('[Error] The user "' + userName + '" is not added!')
            return False

        ## Tries to get user information (template position, fingerprint hash)
        try:
            userData = self.__config.get('Users', userName).split(',')

            ## Validates user information
            if ( len(userData) != 2 ):
                raise Exception('The user information of "' + userName + '" is invalid!')

            expectedPositionNumber = int(userData[0])
            expectedFingerprintHash = userData[1]

        except Exception as e:
            print('[Exception] ' + str(e))
            return False

        ## Tries to check fingerprint
        try:
            print('Waiting for finger...')

            while ( self.__fingerprint.readImage() == False ):
                pass

            self.__fingerprint.convertImage(0x01)

            ## Gets position and accuracy score of template
            result = self.__fingerprint.searchTemplate()
            positionNumber = result[0]
            accuracyScore = result[1]

            ## Checks if the template position is invalid
            if ( positionNumber == -1 ):
                raise Exception('No match found!')

            ## Checks if the template position is correct
            if ( positionNumber == expectedPositionNumber ):
                print('A match was found on template position #' + str(positionNumber) + ' with accuracy score ' + str(accuracyScore) + '.')
            else:
                raise Exception('The template position of the found match (#' + str(positionNumber) + ') is not equal to the stored one (#' + str(expectedPositionNumber) + ')!')

            ## Gets characteristics
            self.__fingerprint.loadTemplate(positionNumber, 0x01)
            characterics = self.__fingerprint.downloadCharacteristics(0x01)

            ## Calculates hash of template
            print('Calculating hash...')
            fingerprintHash = hashlib.sha256(str(characterics)).hexdigest()

            print('Checking if calculated hash matches stored hash...')

            ## Checks if read hash matches stored hash
            if ( fingerprintHash == expectedFingerprintHash ):
                print('Hashes match!')
                print('Check for user "' + userName + '" was successful!')
            else:
                raise Exception('The found template is not assigned to user (the hash does not match)!')

        except Exception as e:
            print('[Exception] Check for user "' + userName + '" failed: ' + str(e))
            return False

        return True


if ( __name__ == '__main__' ):

    parser = argparse.ArgumentParser(description='PAM Fingerprint configuration program:')

    parser.add_argument('--add-user', metavar='NAME', help='Adds a new user.')
    parser.add_argument('--remove-user', metavar='NAME', help='Removes a user.')
    parser.add_argument('--check-user', metavar='NAME', help='Checks fingerprint for an existing user.')
    parser.add_argument('--version', '-v', action='version', version='PAM Fingerprint '+ VERSION, help='Prints version and exits.')

    args = vars(parser.parse_args())

    if ( args['add_user'] ):
        PamFingerprint().addUser(args['add_user'])
    elif ( args['remove_user'] ):
        PamFingerprint().removeUser(args['remove_user'])
    elif ( args['check_user'] ):
        PamFingerprint().checkUser(args['check_user'])
    else:
        parser.print_help()
